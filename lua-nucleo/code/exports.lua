--------------------------------------------------------------------------------
--- Generated exports map for lua-nucleo/
-- @module lua-nucleo.code.exports
-- This file is a part of lua-nucleo library
-- See file `COPYRIGHT` for the license and copyright information
--------------------------------------------------------------------------------
-- WARNING! Do not change manually!
--          Generated by list-exports.
--------------------------------------------------------------------------------

return
{
  END_OF_LOG_MESSAGE =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  EPSILON =
  {
    { "lua-nucleo/math.lua", w = 0 };
  };
  FLUSH_SECONDS_DEFAULT =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  LOG_FLUSH_MODE =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  LOG_LEVEL =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  MAX_TIMESTAMP =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  amap =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  args_proxy =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  arguments =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  arguments_ignorer =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  assert_is_boolean =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_function =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_nil =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_number =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_self =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_string =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_table =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_thread =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_type =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_is_userdata =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  assert_not_nil =
  {
    { "lua-nucleo/typeassert.lua", w = 0 };
  };
  bind_many =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  capture_source_location =
  {
    { "lua-nucleo/diagnostics.lua", w = 0 };
  };
  cdata_cat =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  cdata_wrap =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  check_decorator =
  {
    { "lua-nucleo/testing/decorators.lua", w = 0 };
  };
  check_types =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  collect_all_garbage =
  {
    { "lua-nucleo/misc.lua", w = 0 };
  };
  common_load_schema =
  {
    { "lua-nucleo/dsl/common_load_schema.lua", w = 0 };
  };
  common_method_list =
  {
    { "lua-nucleo/factory.lua", w = 0 };
  };
  compose =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  compose_many =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  count_substrings =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  create_common_fields_by_tag =
  {
    { "lua-nucleo/dsl/dsl_loader.lua", w = 0 };
  };
  create_common_name_filter =
  {
    { "lua-nucleo/dsl/dsl_loader.lua", w = 0 };
  };
  create_escape_subst =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  create_simple_tagged_tree_walkers =
  {
    { "lua-nucleo/dsl/tagged-tree.lua", w = 0 };
  };
  create_table =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  cut_with_ellipsis =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  day_of_week_name_to_number =
  {
    { "lua-nucleo/datetime-utils.lua", w = 0 };
  };
  decoraror_checker_helper =
  {
    { "lua-nucleo/testing/decorators.lua", w = 0 };
  };
  do_in_environment =
  {
    { "lua-nucleo/sandbox.lua", w = 0 };
  };
  do_nothing =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  dostring_in_environment =
  {
    { "lua-nucleo/sandbox.lua", w = 0 };
  };
  dump_nodes =
  {
    { "lua-nucleo/dsl/dump_nodes.lua", w = 0 };
  };
  eat_tag =
  {
    { "lua-nucleo/coro.lua", w = 0 };
  };
  eat_true =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  empty_table =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  ends_with =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  ensure =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_aposteriori_probability =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_equals =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_error =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_error_with_substring =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_fails_with_substring =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_has_substring =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_is =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_returns =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_strequals =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_strlist =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_strpermutations =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_strvariant =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_tdeepequals =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  ensure_tequals =
  {
    { "lua-nucleo/ensure.lua", w = 0 };
  };
  environment_values =
  {
    { "lua-nucleo/testing/decorators.lua", w = 0 };
  };
  epsilon_equals =
  {
    { "lua-nucleo/math.lua", w = 0 };
  };
  escape_for_json =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  escape_lua_pattern =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  escape_string =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  fill_curly_placeholders =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  fill_placeholders =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  fill_placeholders_ex =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  format_logsystem_date =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  get_current_logsystem_date =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  get_day_of_week =
  {
    { "lua-nucleo/datetime-utils.lua", w = 0 };
  };
  get_day_timestamp =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  get_days_in_month =
  {
    { "lua-nucleo/datetime-utils.lua", w = 0 };
  };
  get_decasecond_timestamp =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  get_escaped_chars_in_ranges =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  get_minute_timestamp =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  get_quarter_timestamp =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  get_tomorrow_timestamp =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  get_yesterday_timestamp =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  htmlspecialchars =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  identity =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  integer_to_string_with_base =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  invariant =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  is_boolean =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_function =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_nil =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_number =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_outer_yield_tag =
  {
    { "lua-nucleo/coro.lua", w = 0 };
  };
  is_self =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_string =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_table =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_thread =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_type =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  is_userdata =
  {
    { "lua-nucleo/type.lua", w = 0 };
  };
  kv_concat =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  lassert =
  {
    { "lua-nucleo/assert.lua", w = 0 };
  };
  less_kv =
  {
    { "lua-nucleo/tdeepequals.lua", w = 0 };
  };
  less_than =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  list_caller =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  load_data_schema =
  {
    { "lua-nucleo/dsl/walk_data_with_schema.lua", w = 0 };
  };
  load_data_walkers =
  {
    { "lua-nucleo/dsl/walk_data_with_schema.lua", w = 0 };
  };
  loadstring =
  {
    { "lua-nucleo/legacy.lua", w = 0 };
  };
  looped_linear_interpolator =
  {
    { "lua-nucleo/util/anim/interpolator.lua", w = 0 };
  };
  lower_bound =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  lower_bound_gt =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  lower_bound_pred =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  lua51_keywords =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua51_types =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua52_keywords =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua52_types =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua53_keywords =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua53_types =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua54_keywords =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua54_types =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua_keywords =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  lua_types =
  {
    { "lua-nucleo/language.lua", w = 0 };
  };
  make_checker =
  {
    { "lua-nucleo/checker.lua", w = 0 };
  };
  make_common_logging_config =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  make_concatter =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  make_config_environment =
  {
    { "lua-nucleo/sandbox.lua", w = 0 };
  };
  make_deque =
  {
    { "lua-nucleo/deque.lua", w = 0 };
  };
  make_dsl_loader =
  {
    { "lua-nucleo/dsl/dsl_loader.lua", w = 0 };
  };
  make_enumerator_from_interval =
  {
    { "lua-nucleo/enumerator.lua", w = 0 };
  };
  make_enumerator_from_set =
  {
    { "lua-nucleo/enumerator.lua", w = 0 };
  };
  make_generator_mt =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  make_loggers =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  make_logging_system =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  make_ophash_key_value_store =
  {
    { "lua-nucleo/key_value_store/key_value_store_ophash.lua", w = 0 };
  };
  make_ordered_named_cat_manager =
  {
    { "lua-nucleo/ordered_named_cat_manager.lua", w = 0 };
  };
  make_path_based_walker =
  {
    { "lua-nucleo/dsl/path_based_walker.lua", w = 0 };
  };
  make_prettifier =
  {
    { "lua-nucleo/prettifier.lua", w = 0 };
  };
  make_priority_queue =
  {
    { "lua-nucleo/priority_queue.lua", w = 0 };
  };
  make_scoped_cat_tree_manager =
  {
    { "lua-nucleo/scoped_cat_tree_manager.lua", w = 0 };
  };
  make_simple_key_value_store =
  {
    { "lua-nucleo/key_value_store/key_value_store_simple.lua", w = 0 };
  };
  make_sophisticated_key_value_store =
  {
    { "lua-nucleo/key_value_store/key_value_store_sophisticated.lua", w = 0 };
  };
  make_stack_with_factory =
  {
    { "lua-nucleo/stack_with_factory.lua", w = 0 };
  };
  make_time_table =
  {
    { "lua-nucleo/datetime-utils.lua", w = 0 };
  };
  make_timed_queue =
  {
    { "lua-nucleo/timed_queue.lua", w = 0 };
  };
  make_timestamp_from_string =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  method_arguments =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  month_name_to_number =
  {
    { "lua-nucleo/datetime-utils.lua", w = 0 };
  };
  nargs =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  nearest_left_interpolator =
  {
    { "lua-nucleo/util/anim/interpolator.lua", w = 0 };
  };
  number_to_string =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  optional_arguments =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  ordered_pairs =
  {
    { "lua-nucleo/tdeepequals.lua", w = 0 };
  };
  pack =
  {
    { "lua-nucleo/args.lua", w = 0 };
  };
  pick_init =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  pick_one =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  quicksort =
  {
    { "lua-nucleo/quicksort.lua", w = 0 };
  };
  remove_nil_arguments =
  {
    { "lua-nucleo/functional.lua", w = 0 };
  };
  require_and_declare =
  {
    { "lua-nucleo/require_and_declare.lua", w = 0 };
  };
  resume_inner =
  {
    { "lua-nucleo/coro.lua", w = 0 };
  };
  serialize_number =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  split_by_char =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  split_by_offset =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  starts_with =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  taccumulate =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tappend_many =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tarraylisttohashlist =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tarraytohash =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tclone =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tcount_elements =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tdeepequals =
  {
    { "lua-nucleo/tdeepequals.lua", w = 0 };
  };
  tdeepfilter =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tequals =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tfilterkeylist =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tflip =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tflip_inplace =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tgenerate_1d_linear =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tgenerate_2d_linear =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tgenerate_n =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tgetpath =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tidentityset =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tifilter =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tifindallpermutations =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tifindvalue_nonrecursive =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tiflip =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tiinsert_args =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tijoin_many =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tilistofrecordfields =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  timap =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  timap_inplace =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  timap_sliding =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  timapofrecordgroups =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  timapofrecords =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  times_and_values_looped =
  {
    { "lua-nucleo/util/anim/interpolator.lua", w = 0 };
  };
  tipermute_inplace =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tisarray =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tisarray_not =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tisempty =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tiset =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tiunique =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tivalues =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tiwalk =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tiwalker =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tjson_simple =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  tkeys =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tkeysvalues =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tkvlist2kvpairs =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tkvlist_to_hash =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tkvmap_unpack =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tkvtorecordlist =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tless =
  {
    { "lua-nucleo/tdeepequals.lua", w = 0 };
  };
  tless_kv =
  {
    { "lua-nucleo/tdeepequals.lua", w = 0 };
  };
  tmap_kv =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tmap_values =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tmapofrecordgroups =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tmerge_many =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tmore =
  {
    { "lua-nucleo/tdeepequals.lua", w = 0 };
  };
  tnormalize =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tnormalize_inplace =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  torderedset =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  torderedset_insert =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  torderedset_remove =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  toverride_many =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tpretty =
  {
    { "lua-nucleo/tpretty.lua", w = 0 };
  };
  tpretty_ex =
  {
    { "lua-nucleo/tpretty.lua", w = 0 };
  };
  tpretty_ordered =
  {
    { "lua-nucleo/tpretty.lua", w = 0 };
  };
  treadonly =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  treadonly_ex =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tremap_to_array =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  trim =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  trunc =
  {
    { "lua-nucleo/math.lua", w = 0 };
  };
  tserialize =
  {
    { "lua-nucleo/tserialize.lua", w = 0 };
  };
  tset =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tset_many =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tsetof =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tsetpath =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tsetpathvalue =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tslice =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  tsort_kv =
  {
    { "lua-nucleo/tdeepequals.lua", w = 0 };
  };
  tstr =
  {
    { "lua-nucleo/tstr.lua", w = 0 };
  };
  tstr_cat =
  {
    { "lua-nucleo/tstr.lua", w = 0 };
  };
  tvalues =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  twalk_pairs =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  twithdefaults =
  {
    { "lua-nucleo/table-utils.lua", w = 0 };
  };
  unique_object =
  {
    { "lua-nucleo/misc.lua", w = 0 };
  };
  unpack_timestamp =
  {
    { "lua-nucleo/timestamp.lua", w = 0 };
  };
  upper_bound =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  upper_bound_gt =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  upper_bound_pred =
  {
    { "lua-nucleo/algorithm.lua", w = 0 };
  };
  url_encode =
  {
    { "lua-nucleo/string.lua", w = 0 };
  };
  validate_probability_precise =
  {
    { "lua-nucleo/random.lua", w = 0 };
  };
  validate_probability_rough =
  {
    { "lua-nucleo/random.lua", w = 0 };
  };
  walk_tagged_tree =
  {
    { "lua-nucleo/dsl/tagged-tree.lua", w = 0 };
  };
  wrap_file_sink =
  {
    { "lua-nucleo/log.lua", w = 0 };
  };
  yield_outer =
  {
    { "lua-nucleo/coro.lua", w = 0 };
  };
}
